"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[206],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),m=d(t),u=i,g=m["".concat(p,".").concat(u)]||m[u]||c[u]||s;return t?a.createElement(g,o(o({ref:n},l),{},{components:t})):a.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=u;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var d=2;d<s;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const s={title:"Send Message",sidebar_position:1},o=void 0,r={unversionedId:"use-message/send-message",id:"use-message/send-message",title:"Send Message",description:"SAML messages are transmitted using one of the bindings SAML defines. Light Saml implements HTTP-Redirect and HTTP-POST bindings.",source:"@site/docs/use-message/send-message.md",sourceDirName:"use-message",slug:"/use-message/send-message",permalink:"/docs/use-message/send-message",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Send Message",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Use Message",permalink:"/docs/use-message/"},next:{title:"Receive Message",permalink:"/docs/use-message/receive-message"}},p={},d=[{value:"Redirect binding",id:"redirect-binding",level:2},{value:"Post binding",id:"post-binding",level:2}],l={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"SAML messages are transmitted using one of the bindings SAML defines. Light Saml implements ",(0,i.kt)("em",{parentName:"p"},"HTTP-Redirect")," and ",(0,i.kt)("em",{parentName:"p"},"HTTP-POST bindings"),".\nSpecific binding defines how serialized SAML message XML will be encoded and transferred. Both bindings base64 encode\nthe SAML XML. ",(0,i.kt)("em",{parentName:"p"},"HTTP-Redirect")," binding uses the HTTP GET method and puts base64 encoded SAML message XML in the query parameter.\nThe ",(0,i.kt)("em",{parentName:"p"},"HTTP-POST")," binding sends a message trough a HTML form with POST method."),(0,i.kt)("p",null,"Light Saml implements an ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractBinding")," class that encapsulates all bindings behavior - sending and receiving messages. You\nshould use ",(0,i.kt)("inlineCode",{parentName:"p"},"BindingFactory")," to obtain specific binding instance, passing the binding type constant to it's ",(0,i.kt)("inlineCode",{parentName:"p"},"create()")," method."),(0,i.kt)("p",null,"Binding instance requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageContext")," instance as an argument, and that MessageContext should have the message property set\nbefore calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," method. Both ",(0,i.kt)("em",{parentName:"p"},"HTTP-POST")," and ",(0,i.kt)("em",{parentName:"p"},"HTTP-Redirect")," bindings ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," methods return an instance of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Symfony\\Component\\HttpFoundation\\Response"),"."),(0,i.kt)("h2",{id:"redirect-binding"},"Redirect binding"),(0,i.kt)("p",null,"Redirect binding ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," method returns an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Symfony\\Component\\HttpFoundation\\RedirectResponse")," and it's ",(0,i.kt)("inlineCode",{parentName:"p"},"targetUrl"),"\nproperty is the location user should be redirected to."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$authnRequest = new \\LightSaml\\Model\\Protocol\\AuthnRequest();\n$authnRequest->setDestination('http://destination.com');\n\n$bindingFactory = new \\LightSaml\\Binding\\BindingFactory();\n$redirectBinding = $bindingFactory->create(\\LightSaml\\SamlConstants::BINDING_SAML2_HTTP_REDIRECT);\n\n$messageContext = new \\LightSaml\\Context\\Profile\\MessageContext();\n$messageContext->setMessage($authnRequest);\n\n/** @var \\Symfony\\Component\\HttpFoundation\\RedirectResponse $httpResponse */\n$httpResponse = $redirectBinding->send($messageContext);\nprint $httpResponse->getTargetUrl();\n")),(0,i.kt)("p",null,"The target redirect url for the example above would be similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"http://destination.com?SAMLRequest=BASE64.ENCODED.MESSAGE%3D%3D\n")),(0,i.kt)("h2",{id:"post-binding"},"Post binding"),(0,i.kt)("p",null,"The Post binding ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," method returns an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Symfony\\Component\\HttpFoundation\\Response")," with it's content being\nand HTML form that will automatically POST submit to the destination with encoded SAML message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$authnRequest = new \\LightSaml\\Model\\Protocol\\AuthnRequest();\n$authnRequest->setDestination('http://destination.com');\n\n$bindingFactory = new \\LightSaml\\Binding\\BindingFactory();\n$postBinding = $bindingFactory->create(\\LightSaml\\SamlConstants::BINDING_SAML2_HTTP_POST);\n\n$messageContext = new \\LightSaml\\Context\\Profile\\MessageContext();\n$messageContext->setMessage($authnRequest);\n\n/** @var \\Symfony\\Component\\HttpFoundation\\Response $httpResponse */\n$httpResponse = $postBinding->send($messageContext);\nprint $httpResponse->getContent();\n")),(0,i.kt)("p",null,"Generated HTML for the example above would look similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\n<head>\n    <meta http-equiv="content-type" content="text/html; charset=utf-8" />\n    <title>POST data</title>\n</head>\n<body onload="document.getElementsByTagName(\'input\')[0].click();">\n\n    <noscript>\n        <p><strong>Note:</strong> Since your browser does not support JavaScript, you must\n            press the button below once to proceed.</p>\n    </noscript>\n\n    <form method="post" action="http://destination.com">\n        <input type="submit" style="display:none;" />\n\n        <input type="hidden" name="SAMLRequest" value="BASE64.ENCODED.MESSAGE=" />\n\n        <noscript>\n            <input type="submit" value="Submit" />\n        </noscript>\n\n    </form>\n</body>\n</html>\n')))}m.isMDXComponent=!0}}]);