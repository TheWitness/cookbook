"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,a[1]=o;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2108:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const s={title:"Sign message",sidebar_position:2},a=void 0,o={unversionedId:"security/sign-message",id:"security/sign-message",title:"Sign message",description:"Signing all SAML objects (`AuthnRequest, Response, Assertion, LogoutRequest, and LogoutResponse`) is all done in the",source:"@site/docs/security/sign-message.md",sourceDirName:"security",slug:"/security/sign-message",permalink:"/docs/security/sign-message",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Sign message",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Generate a key pair",permalink:"/docs/security/generate-key-pair"},next:{title:"Verify signature",permalink:"/docs/security/verify-signature"}},l={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Signing all SAML objects (",(0,i.kt)("inlineCode",{parentName:"p"},"AuthnRequest"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Response"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Assertion"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LogoutRequest"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"LogoutResponse"),") is all done in the\nsame way - by setting an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SignatureWriter")," to object's signature property - by the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"setSignature()"))," method.\nSince signing all SAML objects is the same, only the example of signing one of them is given below - signing of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthnRequest"),"."),(0,i.kt)("p",null,"In order to instantiate ",(0,i.kt)("inlineCode",{parentName:"p"},"SignatureWrite")," and enable it for signing, you have to provide to its constructor (or set it later on, but\nbefore the serialization) your ",(0,i.kt)("strong",{parentName:"p"},"certificate")," and your ",(0,i.kt)("strong",{parentName:"p"},"private key"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$authnRequest = new \\LightSaml\\Model\\Protocol\\AuthnRequest();\n$authnRequest\n    ->setAssertionConsumerServiceURL('https://my.site/acs')\n    ->setProtocolBinding(\\LightSaml\\SamlConstants::BINDING_SAML2_HTTP_POST)\n    ->setID(\\LightSaml\\Helper::generateID())\n    ->setIssueInstant(new \\DateTime())\n    ->setDestination('https://idp.com/login')\n    ->setIssuer(new \\LightSaml\\Model\\Assertion\\Issuer('https://my.entity.id'))\n;\n\n$certificate = \\LightSaml\\Credential\\X509Certificate::fromFile('certificate.crt');\n$privateKey = \\LightSaml\\Credential\\KeyHelper::createPrivateKey('private.key', '', true);\n\n$authnRequest->setSignature(new \\LightSaml\\Model\\XmlDSig\\SignatureWriter($certificate, $privateKey));\n\n$serializationContext = new \\LightSaml\\Model\\Context\\SerializationContext();\n$authnRequest->serialize($serializationContext->getDocument(), $serializationContext);\n")),(0,i.kt)("p",null,"Serialization of such AuthnRequest would produce formatted XML similar to one below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<AuthnRequest xmlns="urn:oasis:names:tc:SAML:2.0:protocol"\n    ID="_8d3d46271c2e234f6b0d79f6d2716c707746abf9ca"\n    Version="2.0"\n    IssueInstant="2016-07-27T13:33:50Z"\n    Destination="https://idp.com/login"\n    ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"\n    AssertionConsumerServiceURL="https://my.site/acs"\n>\n    <saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">https://my.entity.id</saml:Issuer>\n    <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">\n        <ds:SignedInfo>\n            <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>\n            <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>\n            <ds:Reference URI="#_8d3d46271c2e234f6b0d79f6d2716c707746abf9ca">\n                <ds:Transforms>\n                    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>\n                    <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>\n                </ds:Transforms>\n                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>\n                <ds:DigestValue>Ez74FQ0Nqwre+mL8/Zsceekeh/s=</ds:DigestValue>\n            </ds:Reference>\n        </ds:SignedInfo>\n        <ds:SignatureValue>SIGNATURE.BYTES.HERE==</ds:SignatureValue>\n        <ds:KeyInfo>\n            <ds:X509Data>\n                <ds:X509Certificate>CERTIFICATE.BYTES.HERE=</ds:X509Certificate>\n            </ds:X509Data>\n        </ds:KeyInfo>\n    </ds:Signature>\n</AuthnRequest>\n')))}p.isMDXComponent=!0}}]);