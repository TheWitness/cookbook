"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[325],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=i,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={title:"Verify signature",sidebar_position:3},o=void 0,s={unversionedId:"security/verify-signature",id:"security/verify-signature",title:"Verify signature",description:"In Light Saml the following SAML documents: AuthnRequest, Response, LogoutRequest, and LogoutResponse, have been generalized",source:"@site/docs/security/verify-signature.md",sourceDirName:"security",slug:"/security/verify-signature",permalink:"/docs/security/verify-signature",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Verify signature",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sign message",permalink:"/docs/security/sign-message"},next:{title:"Encrypt Assertion",permalink:"/docs/security/encrypt-assertion"}},l={},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In Light Saml the following SAML documents: AuthnRequest, Response, LogoutRequest, and LogoutResponse, have been generalized\ninto abstract ",(0,i.kt)("inlineCode",{parentName:"p"},"SamlMessage")," class. It holds attributes and elements common to those documents, like ID, IssueInstance, Issuer...\nAlso, it has the signature property. For the serialization purposes it has to be a SignatureWriter, while after deserialization\nit is a SignatureReader instance."),(0,i.kt)("p",null,"Signature can be validated with ",(0,i.kt)("inlineCode",{parentName:"p"},"SignatureReader::validate()")," method passing the public key argument. It will throw exception\nif signature validation fails, or return true if it succeeds."),(0,i.kt)("p",null,"Following example shows how you can validate the signature of a SAML AuthnRequest."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$xml = \'<AuthnRequest><ds:Signature>...</ds:Signature>...</AuthnRequest>\';\n\n$deserializationContext = new \\LightSaml\\Model\\Context\\DeserializationContext();\n$deserializationContext->getDocument()->loadXML($xml);\n$authnRequest = new \\LightSaml\\Model\\Protocol\\AuthnRequest();\n$authnRequest->deserialize($deserializationContext->getDocument()->firstChild, $deserializationContext);\n\n$key = \\LightSaml\\Credential\\KeyHelper::createPublicKey(\n    \\LightSaml\\Credential\\X509Certificate::fromFile(\'idp.crt\')\n);\n\n/** @var \\LightSaml\\Model\\XmlDSig\\SignatureXmlReader $signatureReader */\n$signatureReader = $authnRequest->getSignature();\n\ntry {\n    $ok = $signatureReader->validate($key);\n\n    if ($ok) {\n        print "Signature OK\\n";\n    } else {\n        print "Signature not validated";\n    }\n} catch (\\Exception $ex) {\n    print "Signature validation failed\\n";\n}\n')),(0,i.kt)("p",null,"Similarly, you could verify the signature of other ",(0,i.kt)("inlineCode",{parentName:"p"},"SamlMessage")," descendants, like ",(0,i.kt)("inlineCode",{parentName:"p"},"Response"),", simply by instantiating it\ninstead of the AuthnRequest from above. The rest of the code will remain the same."))}p.isMDXComponent=!0}}]);