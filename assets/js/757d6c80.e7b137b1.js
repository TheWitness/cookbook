"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[475],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(n),g=i,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=g;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={title:"Receive Message",sidebar_position:2},s=void 0,a={unversionedId:"use-message/receive-message",id:"use-message/receive-message",title:"Receive Message",description:"Receiving a SAML message from the HTTP request with the SAML HTTP POST or Redirect binding, in Light Saml is done with the Binding set",source:"@site/docs/use-message/receive-message.md",sourceDirName:"use-message",slug:"/use-message/receive-message",permalink:"/cookbook/docs/use-message/receive-message",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Receive Message",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Send Message",permalink:"/cookbook/docs/use-message/send-message"},next:{title:"Security",permalink:"/cookbook/docs/security/"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Receiving a SAML message from the HTTP request with the SAML HTTP POST or Redirect binding, in Light Saml is done with the Binding set\nof classes. The ",(0,i.kt)("inlineCode",{parentName:"p"},"BindingFactory")," can detect the binding type for the given HTTP request and instantiate corresponding Binding class,\n",(0,i.kt)("inlineCode",{parentName:"p"},"HttpPostBinding")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpRedirectBinding"),", capable of receiving the SAML message (AuthnRequest, Response...)."),(0,i.kt)("p",null,"First you create Symfony's HttpFoundation Request, instantiate ",(0,i.kt)("inlineCode",{parentName:"p"},"BindingFactory")," with that request and get the actual binding,\nand finally call the binding ",(0,i.kt)("inlineCode",{parentName:"p"},"receive()")," method, that will return deserialized SAML document from the HTTP Request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$request = \\Symfony\\Component\\HttpFoundation\\Request::createFromGlobals();\n\n$bindingFactory = new \\LightSaml\\Binding\\BindingFactory();\n$binding = $bindingFactory->getBindingByRequest($request);\n\n$messageContext = new \\LightSaml\\Context\\Profile\\MessageContext();\n/** @var \\LightSaml\\Model\\Protocol\\Response $response */\n$response = $binding->receive($request, $messageContext);\n\nprint $response->getID();\n")),(0,i.kt)("p",null,"Receiving of other SAML documents/messages, like Response is done in the same way. Return value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Binding::receive()")," depends\non the actual message being sent, and so far AuthnRequest, Response, LogoutResponse, and LogoutRequest are supported and implemented."))}u.isMDXComponent=!0}}]);