"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"Build EntityDescriptor",sidebar_position:1},o=void 0,s={unversionedId:"build-metadata/entity",id:"build-metadata/entity",title:"Build EntityDescriptor",description:"Entity Descriptor is a document that describes features of a SAML entity. It's a way through which a party reveals",source:"@site/docs/build-metadata/entity.md",sourceDirName:"build-metadata",slug:"/build-metadata/entity",permalink:"/docs/build-metadata/entity",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Build EntityDescriptor",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Build Metadata",permalink:"/docs/build-metadata/"},next:{title:"Build EntitiesDescriptor",permalink:"/docs/build-metadata/entities"}},l={},c=[{value:"Simple Entity Descriptor Builder",id:"simple-entity-descriptor-builder",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Entity Descriptor is a document that describes features of a SAML entity. It's a way through which a party reveals\nit's own id (entityID), roles (SP and IDP features), exact locations it communicates trough, it's certificate\nwhich other parties use to verify it's message signatures and for encryption, as well as some\nother details."),(0,i.kt)("p",null,"Most important elements of an SP EntityDescriptor are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"entityID"),(0,i.kt)("li",{parentName:"ul"},"certificate"),(0,i.kt)("li",{parentName:"ul"},"Assertion Consumer Service")),(0,i.kt)("p",null,"Most important elements of an IDP EntityDescriptor are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"entityID"),(0,i.kt)("li",{parentName:"ul"},"certificate"),(0,i.kt)("li",{parentName:"ul"},"Single SignOn Service")),(0,i.kt)("p",null,"Building of an SP Entity Descriptor might look like this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$entityDescriptor = new \\LightSaml\\Model\\Metadata\\EntityDescriptor();\n$entityDescriptor\n    ->setID(\\LightSaml\\Helper::generateID())\n    ->setEntityID('http://some.entity.id')\n;\n\n$entityDescriptor->addItem(\n    $spSsoDescriptor = (new \\LightSaml\\Model\\Metadata\\SpSsoDescriptor())\n        ->setWantAssertionsSigned(true)\n);\n\n$spSsoDescriptor->addKeyDescriptor(\n    $keyDescriptor = (new \\LightSaml\\Model\\Metadata\\KeyDescriptor())\n        ->setUse(\\LightSaml\\Model\\Metadata\\KeyDescriptor::USE_SIGNING)\n        ->setCertificate(\\LightSaml\\Credential\\X509Certificate::fromFile('/path/to/file.crt'))\n);\n\n$spSsoDescriptor->addAssertionConsumerService(\n    $acs = (new \\LightSaml\\Model\\Metadata\\AssertionConsumerService())\n        ->setBinding(\\LightSaml\\SamlConstants::BINDING_SAML2_HTTP_POST)\n        ->setLocation('https://my.site/saml/acs')\n);\n")),(0,i.kt)("p",null,"Serialization of such Entity Descriptor would produce XML similar to one below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<EntityDescriptor ID="_2240bd9c-30c4-4d2a-ab3e-87a94ea334fd" entityID="http://some.entity.id"\n        xmlns="urn:oasis:names:tc:SAML:2.0:metadata">\n    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">\n        <KeyDescriptor use="signing">\n            <KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#">\n                <X509Data>\n                    <X509Certificate>\n                        MIIC0jCCAbqgAw.......\n                    </X509Certificate>\n                </X509Data>\n            </KeyInfo>\n        </KeyDescriptor>\n        <AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"\n                Location="https://my.site/saml/acs"/>\n    </SPSSODescriptor>\n</EntityDescriptor>\n')),(0,i.kt)("h2",{id:"simple-entity-descriptor-builder"},"Simple Entity Descriptor Builder"),(0,i.kt)("p",null,"Light Saml implements a ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleEntityDescriptorBuilder")," class which can simply make an EntityDescriptor,\nboth SP and IDP, based on few given arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"entityID"),(0,i.kt)("li",{parentName:"ul"},"Assertion Consumer Service location"),(0,i.kt)("li",{parentName:"ul"},"Single SignOn location"),(0,i.kt)("li",{parentName:"ul"},"certificate")),(0,i.kt)("p",null,"An EntityDescriptor built above, now using ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleEntityDescriptorBuilder")," can be made, in quite fewer lines\nof code, in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$entityDescriptorBuilder = new \\LightSaml\\Builder\\EntityDescriptor\\SimpleEntityDescriptorBuilder(\n    'http://some.entity.id',\n    'https://my.site/saml/acs',\n    \\LightSaml\\Credential\\X509Certificate::fromFile('/path/to/file.crt')\n);\n$entityDescriptor = $entityDescriptorBuilder->get();\n")),(0,i.kt)("p",null,"You can build your own EntityDescriptor builders by implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"EntityDescriptorProviderInterface")," interface."))}u.isMDXComponent=!0}}]);