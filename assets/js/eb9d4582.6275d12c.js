"use strict";(self.webpackChunklitesaml_docs=self.webpackChunklitesaml_docs||[]).push([[213],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=p(r),d=i,f=u["".concat(c,".").concat(d)]||u[d]||y[d]||o;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},526:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const o={title:"Encrypt Assertion",sidebar_position:4},s=void 0,a={unversionedId:"security/encrypt-assertion",id:"security/encrypt-assertion",title:"Encrypt Assertion",description:"Light Saml supports SAML Assertion encryption. First you need normally to create the `Assertion` with all the data you need. Then",source:"@site/docs/security/encrypt-assertion.md",sourceDirName:"security",slug:"/security/encrypt-assertion",permalink:"/docs/security/encrypt-assertion",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Encrypt Assertion",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Verify signature",permalink:"/docs/security/verify-signature"},next:{title:"Decrypt Assertion",permalink:"/docs/security/decrypt-assertion"}},c={},p=[],l={toc:p};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Light Saml supports SAML Assertion encryption. First you need normally to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Assertion")," with all the data you need. Then\ncreate a new instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"EncryptedAssertionWriter")," and call it's ",(0,i.kt)("inlineCode",{parentName:"p"},"encrypt")," method with the created assertion object and\ncertificate of the recipient. Finally, assign that encryption writer to the SAML Response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$assertion = new Assertion();\n// fill it up with data...\n$certificate = X509Certificate::fromFile('/path/to/saml.crt');\n$encryptedAssertion = new EncryptedAssertionWriter();\n$encryptedAssertion->encrypt($assertion, KeyHelper::createPublicKey($certificate));\n$response = new Response();\n$response->addEncryptedAssertion($encryptedAssertion);\n$context = new SerializationContext();\n$response->serialize($context->getDocument(), $context);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": The SAML protocol also specifies that Assertion should be signed before encryption, while during receiving the Assertion\nprocedure is reversed - you first decrypt it, and then verify its signature."))}u.isMDXComponent=!0}}]);